#!/usr/bin/env node

function read(file) {
	let content = require('fs').readFileSync(file, 'utf8')
	return content.split('\n').filter(Boolean).map(Number)
}

function log(...args) {
	console.log(...args)
}

function exit() {
	process.exit(0)
}

let day = process.argv[1].substr(-2)
if (isNaN(day)) {
	day = process.argv[1].substr(-1)
}
// let nums = read(`${day}-test`)
let nums = read(`${day}-input`)

let steps = []
for (let num of nums) {
	steps[num] = 1
}

let max = Math.max(...nums) + 3
steps[max] = 1

let num = 0
let ones = 0
let threes = 0

while (true) {
	if (num === max) {
		log('got max', { num, ones, threes })
		log('got max', ones * threes)
		break
		// 1984
		// your answer is too low
	}
	if (steps[num + 1]) {
		ones++
		num++
	} else if (steps[num + 2]) {
		num += 2
	} else if (steps[num + 3]) {
		threes++
		num += 3
	} else {
		log('error', num)
	}
}

nums.push(0)
nums.push(max)

let links = new Map()
for (let n1 of nums) {
	for (let n2 of nums) {
		if ([1, 2, 3].includes(n2 - n1)) {
			log(n1, n2)
			links.set(n1, (links.get(n1) || []).concat(n2))
		}
	}
}

log(links)

function connected(n1, n2) {
	return Number(!!(links.get(n1) && links.get(n1).includes(n2)))
}

let mem = {}

// How many ways to get from a to b?
// b is higher than a
function count(a, b, depth = 0) {
	let result = 0

	let key = `${a}-${b}`
	if (mem[key]) {
		return mem[key]
	}

	// log(' '.repeat(depth) + `count(${a}, ${b})?`)

	// There's a direct way
	if (connected(a, b)) {
		result++
	}

	// All other ways go through links where n must be less than b
	let nextNs = links.get(a)
	for (let n of nextNs) {
		if (n < b) {
			result += count(n, b, depth + 1)
		}
	}

	// log(' '.repeat(depth) + `count(${a}, ${b}) is ${result}`)

	mem[key] = result
	return result
}

log(count(0, max))
