#!/usr/bin/env node

function read(file) {
	let content = require('fs').readFileSync(file, 'utf8')
	return content.split('\n').filter(Boolean).map(Number)
}

function log(...args) {
	console.log(...args)
}

function exit() {
	process.exit(0)
}

let day = process.argv[1].substr(-2)
if (isNaN(day)) {
	day = process.argv[1].substr(-1)
}
// let nums = read(`${day}-test`)
let nums = read(`${day}-input`)

let steps = []
for (let num of nums) {
	steps[num] = 1
}

let max = Math.max(...nums) + 3
steps[max] = 1

// log(steps, max)

let num = 0
let ones = 0
let threes = 0

while (true) {
	if (num === max) {
		log('got max', { num, ones, threes })
		log('got max', ones * threes)
		break
		// 1984
		// your answer is too low
	}
	if (steps[num + 1]) {
		ones++
		num++
	} else if (steps[num + 2]) {
		num += 2
	} else if (steps[num + 3]) {
		threes++
		num += 3
	} else {
		log('error', num)
	}
}

nums.push(0)
nums.push(max)

let links = new Map()
for (let n1 of nums) {
	for (let n2 of nums) {
		if ([1,2,3].includes(n2 - n1)) {
			log(n1, n2)
			links.set(n1, (links.get(n1) || []).concat(n2))
		}
	}
}

log(links)

let results = []
let resultCount = 0

let high = 0

// How many ways to get from n1 to n2?
function count(n1, n2) {
	if (n1 > high) {
		high = n1
		log('new high', high, 'trying to reach', n2)
	}
	if (n1 === n2) {
		// results.push(how)
		resultCount += 1
		// log('finished', how)
		return
	}
	if (n1 > n2) {
		return
	}

	let nextNs = links.get(n1)
	let result = 0
	for (let n of nextNs) {
		// how.push(n)
		// let nextHow = [...how, n]
		count(n, n2)
		// how.pop()
	}
}

count(0, max)
log(resultCount)
