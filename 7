#!/usr/bin/env node

function read(file) {
    let content = require('fs').readFileSync(file, 'utf8')
    content = content.replace(/bags/g, 'bag')
    return content.split('\n').filter(Boolean)
}

function log(...args) {
    console.log(...args)
}

let isIn = {
}

let contents = {
}

let lines = read('7-input')
// let lines = read('7-test')
let rules = lines.map(rule => rule.replace(/\.$/, '').split(' contain '))
for (let rule of rules) {
    let container = rule[0]

    if (rule[1] === 'no other bag') {
        continue
    }
    let split = rule[1].split(', ')
    let containees = split.map(c => {
        let count = parseInt(c)
        let color = c.replace(/^\d+ /, '')
        return { count, color }
    })

    for (let c of containees) {
        isIn[c.color] = (isIn[c.color] || []).concat(container)
        contents[container] = (contents[container] || []).concat(c)
    }
}

// log(isIn)
// log(contents)

function collect(color, seen) {
    if (isIn[color]) {
        for (let c of isIn[color]) {
            seen.add(c)
            collect(c, seen)
        }
    }
}

// 113 too high
let colors = new Set()
collect('shiny gold bag', colors)
log('colors', colors.size)

function count(color) {
    let n = 1

    for (let content of (contents[color] || [])) {
        n += content.count * count(content.color)
    }

    return n
}

log(count('shiny gold bag') - 1)
